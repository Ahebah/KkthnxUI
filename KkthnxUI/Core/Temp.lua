-- local K, C, L = unpack(select(2, ...))
--
-- local HAVE_MAIL_FROM = HAVE_MAIL_FROM
--
-- local AddLine = AddLine
-- local frame = MiniMapMailFrame
-- local GetInboxNumItems = GetInboxNumItems
-- local GetLatestThreeSenders = GetLatestThreeSenders
-- local HasNewMail = HasNewMail
-- local Mail_Icon = [[|TInterface\MINIMAP\TRACKING\Mailbox.blp:14:14|t]];
-- local OldShow = frame.Show
-- local Read
--
-- local DataTextMail = CreateFrame("Frame")
-- DataTextMail:EnableMouse(true)
-- DataTextMail:SetFrameLevel(Minimap:GetFrameLevel() + 2)
--
-- local Font, FontSize, FontStyle = C.Media.Font, C.Media.Font_Size, C.Media.Font_Style
-- local NameColor = K.RGBToHex(K.Color.r, K.Color.g, K.Color.b)
-- local Text = Minimap:CreateFontString(nil, "OVERLAY")
-- Text:SetFont(Font, FontSize, FontStyle)
-- Text:SetPoint("BOTTOM", Minimap, "BOTTOM", 0, 16)
--
-- local function MakeIconString()
-- 	local str = ""
-- 		str = str..Mail_Icon
--
-- 	return str
-- end
--
-- function DataTextMail:MailUp(newmail)
-- 	if not newmail then
-- 		frame:Hide()
-- 		frame.Show = nil
-- 	else
-- 		if not frame.Show then
-- 			frame.Show = OldShow
-- 		end
-- 		if newmail then
-- 			frame:Show()
-- 		end
-- 	end
-- end
--
-- local unreadMail
-- local function OnEvent(self, event, ...)
-- 	local newMail = false
--
-- 	if event == "UPDATE_PENDING_MAIL" or event == "PLAYER_ENTERING_WORLD" then
--
-- 		newMail = HasNewMail()
--
-- 		if unreadMail ~= newMail then
-- 			unreadMail = newMail
-- 		end
--
-- 		DataTextMail.MailUp(newMail)
--
--     if event == "PLAYER_ENTERING_WORLD" then
-- 		    self:UnregisterEvent("PLAYER_ENTERING_WORLD")
--       end
-- 	end
--
-- 	if event == "MAIL_INBOX_UPDATE" or event == "MAIL_SHOW" or event == "MAIL_CLOSED" then
-- 		for i = 1, GetInboxNumItems() do
-- 			local _, _, _, _, _, _, _, _, wasRead = GetInboxHeaderInfo(i)
-- 			if (not wasRead) then
-- 				newMail = true
-- 				break
-- 			end
-- 		end
-- 	end
--
-- 	if newMail then
-- 		Text:SetText(MakeIconString()..NameColor.."New Mail!")
-- 		Read = false
-- 	else
-- 		Text:SetText(nil)
-- 		Read = true
-- 	end
--
--   self:SetAllPoints(Text)
-- end
--
-- local function OnUpdate(self)
-- 	OnEvent(self, "UPDATE_PENDING_MAIL")
-- 	self:SetScript("OnUpdate", nil)
-- end
--
-- local function OnEnter(self)
--   local anchor, panel, xoff, yoff = "ANCHOR_BOTTOMLEFT", self:GetParent(), 0, 5
--   GameTooltip:SetOwner(self, anchor, xoff, yoff)
--   GameTooltip:ClearLines()
--
-- 	local sender1, sender2, sender3 = GetLatestThreeSenders()
--
-- 	if not Read then
-- 		GameTooltip:AddLine(HAVE_MAIL_FROM)
-- 		if sender1 then GameTooltip:AddLine("    "..sender1) end
-- 		if sender2 then GameTooltip:AddLine("    "..sender2) end
-- 		if sender3 then GameTooltip:AddLine("    "..sender3) end
-- 	end
--
-- 	GameTooltip:Show()
-- end
--
-- DataTextMail:RegisterEvent("PLAYER_ENTERING_WORLD")
-- DataTextMail:RegisterEvent("MAIL_INBOX_UPDATE")
-- DataTextMail:RegisterEvent("UPDATE_PENDING_MAIL")
-- DataTextMail:RegisterEvent("MAIL_CLOSED")
-- DataTextMail:RegisterEvent("MAIL_SHOW")
-- DataTextMail:SetScript("OnEvent", OnEvent)
-- DataTextMail:SetScript("OnUpdate", OnUpdate)
-- DataTextMail:SetScript("OnEnter", OnEnter)